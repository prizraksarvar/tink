// Copyright 2020 Google Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////////

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: third_party/tink/proto/aes_cmac_prf.proto

package aes_cmac_prf_go_proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// key_type: type.googleapis.com/google.crypto.tink.AesCmacPrfKey
type AesCmacPrfKey struct {
	Version              uint32   `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	KeyValue             []byte   `protobuf:"bytes,2,opt,name=key_value,json=keyValue,proto3" json:"key_value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AesCmacPrfKey) Reset()         { *m = AesCmacPrfKey{} }
func (m *AesCmacPrfKey) String() string { return proto.CompactTextString(m) }
func (*AesCmacPrfKey) ProtoMessage()    {}
func (*AesCmacPrfKey) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6d4e5452c9b736, []int{0}
}

func (m *AesCmacPrfKey) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AesCmacPrfKey.Unmarshal(m, b)
}
func (m *AesCmacPrfKey) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AesCmacPrfKey.Marshal(b, m, deterministic)
}
func (m *AesCmacPrfKey) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AesCmacPrfKey.Merge(m, src)
}
func (m *AesCmacPrfKey) XXX_Size() int {
	return xxx_messageInfo_AesCmacPrfKey.Size(m)
}
func (m *AesCmacPrfKey) XXX_DiscardUnknown() {
	xxx_messageInfo_AesCmacPrfKey.DiscardUnknown(m)
}

var xxx_messageInfo_AesCmacPrfKey proto.InternalMessageInfo

func (m *AesCmacPrfKey) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AesCmacPrfKey) GetKeyValue() []byte {
	if m != nil {
		return m.KeyValue
	}
	return nil
}

type AesCmacPrfKeyFormat struct {
	Version              uint32   `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
	KeySize              uint32   `protobuf:"varint,1,opt,name=key_size,json=keySize,proto3" json:"key_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AesCmacPrfKeyFormat) Reset()         { *m = AesCmacPrfKeyFormat{} }
func (m *AesCmacPrfKeyFormat) String() string { return proto.CompactTextString(m) }
func (*AesCmacPrfKeyFormat) ProtoMessage()    {}
func (*AesCmacPrfKeyFormat) Descriptor() ([]byte, []int) {
	return fileDescriptor_cf6d4e5452c9b736, []int{1}
}

func (m *AesCmacPrfKeyFormat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AesCmacPrfKeyFormat.Unmarshal(m, b)
}
func (m *AesCmacPrfKeyFormat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AesCmacPrfKeyFormat.Marshal(b, m, deterministic)
}
func (m *AesCmacPrfKeyFormat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AesCmacPrfKeyFormat.Merge(m, src)
}
func (m *AesCmacPrfKeyFormat) XXX_Size() int {
	return xxx_messageInfo_AesCmacPrfKeyFormat.Size(m)
}
func (m *AesCmacPrfKeyFormat) XXX_DiscardUnknown() {
	xxx_messageInfo_AesCmacPrfKeyFormat.DiscardUnknown(m)
}

var xxx_messageInfo_AesCmacPrfKeyFormat proto.InternalMessageInfo

func (m *AesCmacPrfKeyFormat) GetVersion() uint32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *AesCmacPrfKeyFormat) GetKeySize() uint32 {
	if m != nil {
		return m.KeySize
	}
	return 0
}

func init() {
	proto.RegisterType((*AesCmacPrfKey)(nil), "google.crypto.tink.AesCmacPrfKey")
	proto.RegisterType((*AesCmacPrfKeyFormat)(nil), "google.crypto.tink.AesCmacPrfKeyFormat")
}

func init() {
	proto.RegisterFile("proto/aes_cmac_prf.proto", fileDescriptor_cf6d4e5452c9b736)
}

var fileDescriptor_cf6d4e5452c9b736 = []byte{
	// 233 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0x2c, 0xc9, 0xc8, 0x2c,
	0x4a, 0x89, 0x2f, 0x48, 0x2c, 0x2a, 0xa9, 0xd4, 0x2f, 0xc9, 0xcc, 0xcb, 0xd6, 0x2f, 0x28, 0xca,
	0x2f, 0xc9, 0xd7, 0x4f, 0x4c, 0x2d, 0x8e, 0x4f, 0xce, 0x4d, 0x4c, 0x8e, 0x2f, 0x28, 0x4a, 0xd3,
	0x03, 0x0b, 0x09, 0x09, 0xa5, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0xea, 0x25, 0x17, 0x55, 0x16, 0x94,
	0xe4, 0xeb, 0x81, 0x14, 0x2b, 0xb9, 0x71, 0xf1, 0x3a, 0xa6, 0x16, 0x3b, 0xe7, 0x26, 0x26, 0x07,
	0x14, 0xa5, 0x79, 0xa7, 0x56, 0x0a, 0x49, 0x70, 0xb1, 0x97, 0xa5, 0x16, 0x15, 0x67, 0xe6, 0xe7,
	0x49, 0x30, 0x2a, 0x30, 0x6a, 0xf0, 0x06, 0xc1, 0xb8, 0x42, 0xd2, 0x5c, 0x9c, 0xd9, 0xa9, 0x95,
	0xf1, 0x65, 0x89, 0x39, 0xa5, 0xa9, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0x3c, 0x41, 0x1c, 0xd9, 0xa9,
	0x95, 0x61, 0x20, 0xbe, 0x92, 0x17, 0x97, 0x30, 0x8a, 0x39, 0x6e, 0xf9, 0x45, 0xb9, 0x89, 0x25,
	0xc8, 0xa6, 0x31, 0xa1, 0x9a, 0x26, 0xc9, 0x05, 0xd2, 0x1c, 0x5f, 0x9c, 0x59, 0x95, 0x0a, 0xb3,
	0x28, 0x3b, 0xb5, 0x32, 0x38, 0xb3, 0x2a, 0xd5, 0x29, 0x96, 0x4b, 0x26, 0x39, 0x3f, 0x57, 0x0f,
	0xd3, 0xb5, 0x10, 0x7f, 0x04, 0x30, 0x46, 0x19, 0xa5, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25,
	0xe7, 0xe7, 0xea, 0x43, 0x94, 0xe1, 0xf2, 0x7a, 0x7c, 0x7a, 0x7e, 0x3c, 0x58, 0x74, 0x11, 0x13,
	0x5b, 0x88, 0xa7, 0x9f, 0x77, 0x80, 0x53, 0x12, 0x1b, 0x98, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xfc, 0x62, 0xa1, 0x55, 0x3a, 0x01, 0x00, 0x00,
}
